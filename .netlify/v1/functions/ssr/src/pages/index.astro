---
import Layout from '../layouts/Layout.astro';
import { getPosts, getOracionesCategoriaId, getCategory } from '../lib/api';

const posts = await getPosts();
const oracionesId = await getOracionesCategoriaId();
const oracionesCategory = await getCategory('oraciones-cristianas') || await getCategory('oraciones');
---

<Layout title="Oraciones Cristianas - Reza Cada Día">
  <section class="mb-16">
    <div class="text-center mb-12">
      <h1 class="text-5xl font-heading font-medium text-dark-500 leading-tight mb-6">
        Oraciones Cristianas
      </h1>
      <div class="decorated-title mb-6">
        <span class="text-primary-500 font-serif italic">Fe y devoción</span>
      </div>
      <p class="text-xl text-dark-400 max-w-3xl mx-auto font-light">
        Encuentra paz y consuelo en nuestra colección de oraciones para diferentes momentos y necesidades espirituales
      </p>
    </div>
  </section>
  
  <main>
    <div class="mb-12 flex items-center justify-between">
      <h2 class="text-3xl font-heading font-medium text-dark-500">Colección de Oraciones</h2>
      <div class="flex space-x-2">
        <button id="grid-view-btn" class="p-2 rounded-md bg-primary-50 text-primary-600 hover:bg-primary-100 transition-colors" aria-label="Vista de cuadrícula">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
            <path d="M5 3a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2V5a2 2 0 00-2-2H5zM5 11a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2v-2a2 2 0 00-2-2H5zM11 5a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V5zM11 13a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
          </svg>
        </button>
        <button id="list-view-btn" class="p-2 rounded-md bg-gray-100 hover:bg-gray-200 transition-colors" aria-label="Vista de lista">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd" />
          </svg>
        </button>
      </div>
    </div>
    
    <ul id="posts-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {posts.map((post) => (
        <li class="chapel-card group bg-white rounded-none overflow-hidden shadow-sm hover:shadow-md transition-all">
          <div class="relative h-56 overflow-hidden">
            {post._embedded?.['wp:featuredmedia']?.[0] ? (
              <img 
                src={post._embedded['wp:featuredmedia'][0].source_url}
                alt={post.title.rendered}
                class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
              />
            ) : (
              <div class="w-full h-full bg-gradient-to-tr from-primary-50 to-primary-100 flex items-center justify-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-primary-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
              </div>
            )}
            <div class="absolute top-4 left-4 flex flex-wrap gap-2">
              {post._embedded?.['wp:term']?.[0]?.map((category) => (
                <span class="bg-dark-500/70 backdrop-blur-md text-white text-xs px-3 py-1 font-sans uppercase tracking-wider">
                  {category.name}
                </span>
              ))}
            </div>
          </div>
          
          <div class="p-8">
            <h2 class="text-2xl font-heading mb-3 text-dark-500 group-hover:text-primary-500 transition-colors">{post.title.rendered}</h2>
            <div class="text-dark-400 mb-4 line-clamp-2 font-light" set:html={post.excerpt.rendered}></div>
            
            <div class="flex items-center justify-between pt-4 border-t border-gray-100">
              <span class="text-sm text-dark-300 italic font-serif">
                {new Date(post.date).toLocaleDateString('es-ES', { 
                  day: 'numeric', 
                  month: 'long'
                })}
              </span>
              <a href={`/post/${post.slug}`} class="inline-flex items-center text-primary-500 hover:text-primary-600 font-medium uppercase text-xs tracking-wider">
                Leer más
                <svg xmlns="http://www.w3.org/2000/svg" class="ml-1 h-3 w-3" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                </svg>
              </a>
            </div>
          </div>
        </li>
      ))}
    </ul>
  </main>
</Layout>

<script>
  // Lógica para cambiar entre vista de cuadrícula y lista
  document.addEventListener('DOMContentLoaded', () => {
    const gridViewBtn = document.getElementById('grid-view-btn');
    const listViewBtn = document.getElementById('list-view-btn');
    const postsContainer = document.getElementById('posts-container');
    
    // Verificación para evitar errores si faltan elementos
    if (!gridViewBtn || !listViewBtn || !postsContainer) {
      console.error('Faltan elementos necesarios para la función de cambio de vista');
      return;
    }
    
    // Función para cambiar a vista de cuadrícula
    const switchToGridView = () => {
      // Actualizar clases del contenedor
      postsContainer.classList.remove('flex', 'flex-col', 'gap-6');
      postsContainer.classList.add('grid', 'grid-cols-1', 'md:grid-cols-2', 'lg:grid-cols-3', 'gap-8');
      
      // Actualizar apariencia de los botones
      gridViewBtn.classList.remove('bg-gray-100');
      gridViewBtn.classList.add('bg-primary-50', 'text-primary-700');
      listViewBtn.classList.remove('bg-primary-50', 'text-primary-700');
      listViewBtn.classList.add('bg-gray-100');
      
      // Resetear las clases de los elementos de lista que se modificaron en la vista de lista
      const listItems = postsContainer.querySelectorAll('li');
      listItems.forEach(item => {
        // Remover clases agregadas para la vista de lista
        item.classList.remove('flex', 'md:flex-row', 'flex-col');
        
        // Restaurar el contenedor de la imagen a su estado original
        const imageContainer = item.querySelector('.relative');
        if (imageContainer) {
          imageContainer.classList.remove('md-w-third', 'md:h-auto'); // Cambiado: md:w-1/3 → md-w-third
          imageContainer.classList.add('h-56');
        }
        
        // Restaurar el contenedor de texto a su estado original
        const textContainer = item.querySelector('.p-8');
        if (textContainer) {
          textContainer.classList.remove('md:w-2/3', 'flex-1');
        }
      });
      
      // Guardar preferencia del usuario
      localStorage.setItem('viewMode', 'grid');
    };
    
    // Función para cambiar a vista de lista
    const switchToListView = () => {
      // Actualizar clases del contenedor
      postsContainer.classList.remove('grid', 'grid-cols-1', 'md:grid-cols-2', 'lg:grid-cols-3', 'gap-8');
      postsContainer.classList.add('flex', 'flex-col', 'gap-6');
      
      // Actualizar apariencia de los botones
      listViewBtn.classList.remove('bg-gray-100');
      listViewBtn.classList.add('bg-primary-50', 'text-primary-700');
      gridViewBtn.classList.remove('bg-primary-50', 'text-primary-700');
      gridViewBtn.classList.add('bg-gray-100');
      
      // Guardar preferencia del usuario
      localStorage.setItem('viewMode', 'list');
      
      // Aplicar estilos a elementos de la lista
      const listItems = postsContainer.querySelectorAll('li');
      listItems.forEach(item => {
        item.classList.add('flex', 'md:flex-row', 'flex-col');
        
        // Buscar el contenedor de imagen y verificar si existe
        const imageContainer = item.querySelector('.relative');
        if (imageContainer) {
          imageContainer.classList.remove('h-56');
          imageContainer.classList.add('md-w-third', 'md:h-auto'); // Cambiado: md:w-1/3 → md-w-third
        } else {
          console.debug('Contenedor de imagen no encontrado para un elemento de la lista');
        }
        
        // Buscar el contenedor de texto con la clase correcta .p-8 y verificar
        const textContainer = item.querySelector('.p-8');
        if (textContainer) {
          textContainer.classList.add('md:w-2/3', 'flex-1');
        } else {
          console.debug('Contenedor de texto no encontrado para un elemento de la lista');
        }
      });
    };
    
    // Asignar eventos a botones
    gridViewBtn.addEventListener('click', switchToGridView);
    listViewBtn.addEventListener('click', switchToListView);
    
    // Cargar preferencia guardada o usar vista de cuadrícula por defecto
    try {
      const savedViewMode = localStorage.getItem('viewMode');
      if (savedViewMode === 'list') {
        switchToListView();
      } else {
        switchToGridView();
      }
    } catch (error) {
      console.error('Error al cargar la preferencia de vista:', error);
      // Usar grid como fallback
      switchToGridView();
    }
  });
</script>

<style>
  /* Añadir nuestra clase personalizada para reemplazar md:w-1/3 */
  .md-w-third {
    @media (min-width: 768px) {
      width: 33.333333%;
    }
  }
</style>
